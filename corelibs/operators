# based on the assumption that variables from outer namespaces can only be read,
# but they can be written with :raise (which needs to be able to redefine variables).

"++" (
    {(dup type "ref" ==)
    	(
    	    dup dup
    	    # the first dup pushes two references to get name and value from,
    	    # the second is necessary to have an argument for refName :raise

    	    refName       # name
    	    swap refGet   # value
    	    1 +
    	    :num

    	    refName
    	    :raise
        )
    	(1 +)
    }
) :seq


"--" (
    {(dup type "ref" ==)
    	(
    	    dup dup
    	    # the first dup pushes two references to get name and value from,
    	    # the second is necessary to have an argument for refName :raise

    	    refName       # name
    	    swap refGet   # value
    	    1 -
    	    :num

    	    refName
    	    :raise
        )
    	(1 -)
    }
) :seq


# **: n to the power of m
# pops:
# (num) n
# (num) m
# pushes:
# (num) n to the power of m

"**" (
    "b" swap 0 + :num
    {(b 0 ==)
    (pop 1)
    (
        "a" swap 0 + :num
        a {(b 1 >)(
            a * b
            b 1 - =
            self
        )}
        0 +
    )}
) :seq

"a" (2 3 **) :seq