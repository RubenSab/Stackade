# count from 0 to 10

0
{
    (dup 10 <=)
    (dup print " " print (1 +) self) # true
    ("done!" print)                  # false
}


# identity matrix

"printMatrix" (

    "n" swap :num
    "i" 0 :num
    "j" 0 :num

    {
        (i n <)
        (
            {
                (j n <)
                ({(i j ==)(1)(0)} print " " print j ++ self)
                (j 0 =)
            }

            "\n" print
            i ++
            self
        )
    }
) :seq

10 printMatrix

"diagonalsMatrix" (

    "size" swap :num
    "i" 0 :num
    "j" 0 :num

    {
        (i size <)
        (
            {(j size <)
                ({(i j == i    j + size 1 - ==    or)
                    ({(i j == i    j + size 1 - ==    and)
                        ("o")
                        (size)
                    })
                    (" ")}
                print " " print j ++ self)
                (j 0 =)}

            "\n" print
            i ++
            self
        )
    }
) :seq

7 diagonalsMatrix

"n" 1 :num // define n = 1
"pointer" n :ref // define a pointer to n
pointer get 2 + print // get the value of pointer and add 2
debug