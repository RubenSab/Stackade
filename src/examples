# count from 0 to 10

0
{
    (dup 10 <=)
    (dup print " " print (1 +) self) # true
    ("done!" print)                  # false
}


# identity matrix

"printMatrix" (

    "n" swap :num
    "i" 0 :num
    "j" 0 :num

    {
        (i n <)
        (
            {
                (j n <)
                ({(i j ==)(1)(0)} print " " print j ++ self)
                (j 0 =)
            }

            "\n" print
            i ++
            self
        )
    }
) :seq

10 printMatrix

"diagonalsMatrix" (

    "size" swap :num
    "i" 0 :num
    "j" 0 :num

    {
        (i size <)
        (
            {(j size <)
                ({(i j == i    j + size 1 - ==    or)
                    ({(i j == i    j + size 1 - ==    and)
                        ("o")
                        (size)
                    })
                    (" ")}
                print " " print j ++ self)
                (j 0 =)}

            "\n" print
            i ++
            self
        )
    }
) :seq

7 diagonalsMatrix


"n" 1 :num              # define n = 1
"pointer" n :ref        # define a pointer to n
pointer get 2 + print   # get the value of pointer and add 2
"pointer" :del          # just like any other variable, pointers can be deleted from namespace
debug halt


# Circular reference

"B" A :ref   # define a reference B to a yet unexisting A variable
"A" B :ref   # define a reference A to B

debug halt


# Casting

"A" 3 :num
A toStr print

"\n" print

"B" "5.2" :str
B toNum print


# Array implementation

"addNum" (
    "value" swap :num    # the arguments are taken in reverse order because of how they get pushed on the stack
    "index" swap :num
    "listName" swap :str

    "elementName" listName   index toStr   cat :str   # assemble element name (example: newList.0)
    elementName refGet value refGet :num              # assign value to the new list element name

    elementName refGet   # get elementName's content (so the name of the new list element)
    :raiseName           # raise it to caller's namespace before this sequence's namespace collapses

) :seq


"getFrom" (
    "index" swap :num
    "name" swap :str

    name   index toStr   cat strGet
) :seq

"println" (
    print "\n" print
) :seq

# test

"listTest" 0 42 addNum
"listTest" 0 getFrom println

"listTest" 0 41 addNum
"listTest" 0 getFrom println

"listTest0" exists println
debug